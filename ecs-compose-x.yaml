services:
  django:
    secrets:
      - common
    deploy:
      resources:
        reservations:
          cpus: '0.5'
          memory: 500MB
        limits:
          cpus: '2'
          memory: 2GB
    x-logging:
      enable-logging: true
      RetentionInDays: 30
    platform: linux/amd64
    x-ecs:
      CpuArchitecture: X86_64 # ARM64, X86_64
      OperatingSystemFamily: LINUX
      EnableExecuteCommand: false # allows to ssh into the container e.g. for debugging
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: 1
          Weight: 1
        # - CapacityProvider: FARGATE_SPOT
        #   Base: 1
        #   Weight: 1
    x-ecr:
      InterpolateWithDigest: true # ensures exact image version is used

  # redis:
  #   deploy:
  #     resources:
  #       reservations:
  #         cpus: '1'
  #         memory: 1GB
  #   x-ecs:
  #     CapacityProviderStrategy:
  #       - CapacityProvider: FARGATE
  #         Base: 1
  #         Weight: 1
  #     EnableExecuteCommand: true
  #     CpuArchitecture: X86_64
  #     OperatingSystemFamily: LINUX

# volumes:
#   redis_data:
#     x-efs:
#       # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html
#       Properties:
#         PerformanceMode: maxIO # generalPurpose | maxIO
#         # https://docs.aws.amazon.com/efs/latest/ug/performance.html#provisioned-throughput
#         ThroughputMode: provisioned # bursting | provisioned | elastic
#         ProvisionedThroughputInMibps: 50
#         Encrypted: true
#         LifecyclePolicy:
#           TransitionToIA: 30 # number of days after files were last accessed in primary storage before they are transitioned to the infrequent access storage class
#           TransitionToArchive: 60
#         BackupPolicy:
#           Status: ENABLED

secrets:
  common:
    x-secrets:
      Name: /memorylane
      LinksTo:
        - EcsExecutionRole
        - EcsTaskRole
      JsonKeys:
        - SecretKey: DB_HOST # secret key in AWS Secrets Manager
          VarName: DB_HOST # environment variable in the container
        - SecretKey: DB_NAME
          VarName: DB_NAME
        - SecretKey: DB_USER
          VarName: DB_USER
        - SecretKey: DB_PASSWORD
          VarName: DB_PASSWORD

# Load Balancer
x-elbv2:
  public-alb:
    DnsAliases:
      - Route53Zone: x-route53::public-zone
        Names:
          - p007.emergingevidence.ch # Will create a new record pointing to the ALB/NLB
    Properties:
      Scheme: internet-facing
      Type: application
    Services:
      django:django: # family:service
        port: 3000 # ! container port
        protocol: HTTP
        #healthcheck: 3000:HTTP:/api/ping:200
        healthcheck: 3000:HTTP:/api/v1/health/check/:200
      # meilisearch:meilisearch: # family:service
      #   port: 7700 # ! container port
      #   protocol: HTTP
      #   healthcheck: 7700:HTTP:/health:200
    Listeners:
      - Port: 80
        Protocol: HTTP
        DefaultActions:
          - Redirect: HTTP_TO_HTTPS
      - Port: 443
        Protocol: HTTPS
        Certificates:
          - CertificateArn: ${elb_cert_arn}
        Targets:
          - name: django:django
            access: /
      # - Port: 7700
      #   Protocol: HTTPS
      #   Certificates:
      #     - CertificateArn: arn:aws:acm:eu-central-2:654654575912:certificate/dce74c46-dc54-476a-8729-4ddb412aef9e
      #   Targets:
      #     - name: meilisearch:meilisearch
      #       access: /
    MacroParameters:
      timeout_seconds: 120
      desync_mitigation_mode: defensive
      drop_invalid_header_fields: False
      http2: True
      cross_zone: True
      Ingress:
        ExtSources:
          - IPv4: "0.0.0.0/0"
            Description: ANY

# Database
x-rds:
  # https://docs.compose-x.io/syntax/compose_x/rds.html
  django-db:
    Properties: # MacroParameters for RDS allow you to set only very little settings / properties and let ECS ComposeX do the rest for you.
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbinstance.html#cfn-rds-dbinstance-engine
      DBInstanceIdentifier: django
      # DBName: postgres
      Engine: "postgres"
      EngineVersion: "16"
      AllocatedStorage: 5 # GB
      # DBSecurityGroups
      AutoMinorVersionUpgrade: True
      BackupRetentionPeriod: 7 # days
      StorageEncrypted: True
      # StorageThroughput
      # StorageType
      Timezone: "Europe/Zurich" # UTC
      DBInstanceClass: db.t3.micro
    # https://github.com/cloudtools/troposphere/blob/main/troposphere/rds.py#L228
    MacroParameters: {}
    # provide access to services and map secrets to env vars
    Services:
      django:
        access:
          DBCluster: RW
        SecretsMappings:
          Mappings:
            dbname: DB_NAME2
            username: DB_USER2
            password: DB_PASSWORD2
            host: DB_HOST2
            port: DB_PORT2
