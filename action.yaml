name: 'CloudFormation Deploy'
description: 'Deploy to AWS CloudFormation using Python 3.11 and AWS CLI'
inputs:
  cf-stack-prefix:
    description: 'The prefix for the CloudFormation stack name. Fallback to repo name.'
    required: true
    default: ""
  cf-template-path:
    description: 'The path to the CloudFormation template file. Fallback to "template.yaml".'
    required: false
    default: ""
  cf-parameter-overrides:
    description: 'The CloudFormation parameters to override in YAML format. Fallback to empty string.'
    required: false
    default: ""
  builds:
    description: 'Services to build and deploy in YAML format. Fallback to empty string.'
    required: true
    default: ""
  env-name:
    description: 'The environment name to deploy to. Fallback to "dev".'
    required: false
    default: "dev"
  ecr-keep-last-n-images:
    description: 'The number of images to keep in the ECR repository. Fallback to 10.'
    required: false
    default: "10"


outputs:
  cf-output-path:
    description: 'A JSON string containing all CloudFormation outputs in JSON format'
    value: ${{ steps.deploy.outputs.cf-output-path }}
  service-to-image-uri-json:
    description: 'A JSON string containing all service to image URI mappings in JSON format'
    value: ${{ steps.deploy.outputs.service-to-image-uri-json }}

runs:
  using: 'composite'
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: /tmp/.pip-action-cache
        key: ${{ runner.os }}-pip-${{ hashFiles('${GITHUB_ACTION_PATH}/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      shell: bash
      run: |
        PIP_CACHE_DIR=/tmp/.pip-action-cache pip install -r ${GITHUB_ACTION_PATH}/requirements.txt -q

    - # Add support for more platforms with QEMU
      name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-cache
        restore-keys: |
          ${{ runner.os }}-buildx-cache

    - name: Deploy
      shell: bash
      id: deploy
      env:
        GITHUB_WORKSPACE: ${{ github.workspace }}
        INPUT_CF_STACK_PREFIX: ${{ inputs.cf-stack-prefix }}
        INPUT_CF_TEMPLATE_PATH: ${{ inputs.cf-template-path }}
        INPUT_CF_PARAMETER_OVERRIDES: ${{ inputs.cf-parameter-overrides }}
        INPUT_ENV_NAME: ${{ inputs.env-name }}
        INPUT_BUILD_PARAMS: ${{ inputs.builds }}
        INPUT_ECR_KEEP_LAST_N_IMAGES: ${{ inputs.ecr-keep-last-n-images }}
      run: |
        cd ${GITHUB_ACTION_PATH}
        python -m src.github_action_handler
